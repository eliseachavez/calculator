SCOPE

- C family has BLOCK scope, javascript has FUNCTION level scope
	- blocks, like if statements, don't create new scope (C); only functions create new scope in javascript
	- so if a variable is declared outside a function, and redeclared in a function, outside the function it will remain the original outside value
- Scope best practices for Js:
	- only use var for declaring variables
	- do exactly one var statement per scope, and at the very top of that scope
	- if this is done, there will be no confusion about hoisting
	- downside: makes it hard to track which variables have been declared in current scope
- from ECMAScript standard:
	- "If the variable statement occurs inside a FunctionDeclaration, the variables are defined with function-local scope in that function, as described in section 10.1.3. Otherwise, they are defined with global scope (that is, they are created as members of the global object, as described in section 10.1.3) using property attributes { DontDelete }. Variables are created when the execution scope is entered. A Block does not define a new execution scope. Only Program and FunctionDeclaration produce a new scope. Variables are initialised to undefined when created. A variable with an Initialiser is assigned the value of its AssignmentExpression when the VariableStatement is executed, not when the variable is created." 
- more from another source: In JavaScript, you cannot pass parameters by reference; that is, if you pass a variable to a function, its value is copied and handed to the function (pass by value). Therefore, the function can't change the variable. If you need to do so, you must wrap the value of the variable (e.g., in an array).
